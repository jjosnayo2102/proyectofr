#!/usr/bin/env python3
import rospy
import actionlib
import numpy as np
import PyKDL as kdl
import subprocess
from urdf_parser_py.urdf import URDF
from kdl_parser_py.urdf import treeFromUrdfModel
from trajectory_msgs.msg import JointTrajectoryPoint
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from sensor_msgs.msg import JointState

def cargar_urdf_desde_xacro(xacro_path):
    xacro_result = subprocess.run(['xacro', xacro_path], capture_output=True, text=True)
    if xacro_result.returncode != 0:
        rospy.logerr("Error procesando xacro:\n" + xacro_result.stderr)
        exit(1)
    return URDF.from_xml_string(xacro_result.stdout)

def interpolar_cartesianamente(pose1, pose2, alpha):
    pos_interp = pose1.p * (1 - alpha) + pose2.p * alpha
    rot_interp = pose1.M  # mantiene la rotación inicial
    return kdl.Frame(rot_interp, pos_interp)

def obtener_fk_pose(q_kdl, fk_solver):
    pose = kdl.Frame()
    fk_solver.JntToCart(q_kdl, pose)
    return pose

def control_cinematico_diferencial(chain, q_inicio, pose_objetivo, pasos, dt):
    """
    Ejecuta control cinemático diferencial usando IK de velocidad.
    Retorna una lista de JointTrajectoryPoint con valores del gripper añadidos.
    """
    ik_vel = kdl.ChainIkSolverVel_pinv(chain)
    fk_solver = kdl.ChainFkSolverPos_recursive(chain)

    q_actual = kdl.JntArray(chain.getNrOfJoints())
    for i in range(q_actual.rows()):
        q_actual[i] = q_inicio[i]

    pose_inicial = obtener_fk_pose(q_actual, fk_solver)
    trayectoria = []

    gripper_pos = [0.04, 0.04]  # valores fijos del gripper (abierto)

    for paso in range(1, pasos + 1):
        alpha = paso / pasos
        pose_deseada = interpolar_cartesianamente(pose_inicial, pose_objetivo, alpha)

        delta_twist = kdl.diff(obtener_fk_pose(q_actual, fk_solver), pose_deseada)
        
        dq = kdl.JntArray(chain.getNrOfJoints())
        result = ik_vel.CartToJnt(q_actual, delta_twist, dq)
        if result < 0:
            rospy.logwarn(f"Falló IK vel en paso {paso}")
            continue

        # Integrar posición
        for i in range(q_actual.rows()):
            q_actual[i] += dq[i] * dt  # integración explícita simple

        # Concatenar con gripper fijo
        q_point = [q_actual[i] for i in range(q_actual.rows())]
        q_total = q_point + gripper_pos

        # Guardar punto de trayectoria
        point = JointTrajectoryPoint()
        point.positions = q_total
        point.time_from_start = rospy.Duration(paso * dt)
        trayectoria.append(point)

    return trayectoria

if __name__ == '__main__':
    rospy.init_node('fanuc_control_cinematico')

    # Articulaciones del brazo + gripper
    joint_names = [
        'joint_1', 'joint_2', 'joint_3', 'joint_4', 'joint_5', 'joint_6',
        'gripper_base_finger_1', 'gripper_base_finger_2'
    ]

    q_min_vals = [-2.967, -1.745, -1.222, -3.316, -2.181, -6.283]
    q_max_vals = [ 2.967,  2.530,  3.577,  3.316,  2.181,  6.283]

    # Esperar estado articular actual
    rospy.loginfo("Esperando /joint_states...")
    joint_state = rospy.wait_for_message("/joint_states", JointState)
    name_to_pos = dict(zip(joint_state.name, joint_state.position))
    q_actual_np = np.array([name_to_pos[j] for j in joint_names[:6]])  # solo brazo

    # Cargar modelo URDF desde xacro
    xacro_path = '/home/jjosnayo/lab_ws/src/proyectofr/fanuc_robot/fanuc_lrmate200id_support/urdf/lrmate200id.xacro'
    robot = cargar_urdf_desde_xacro(xacro_path)
    _, tree = treeFromUrdfModel(robot)
    chain = tree.getChain("base_link", "tool0")

    # Preparar estado articular inicial (solo brazo)
    q_inicio = kdl.JntArray(len(q_actual_np))
    for i, val in enumerate(q_actual_np):
        q_inicio[i] = val

    # Definir pose objetivo cartesiana
    pose_objetivo = kdl.Frame(kdl.Rotation.RPY(0, 0, 0), kdl.Vector(0.5, 0, 0))

    # Generar trayectoria con control cinemático diferencial
    pasos = 40
    dt = 0.1  # segundos entre puntos
    rospy.loginfo("Generando trayectoria suave con PyKDL...")
    puntos = control_cinematico_diferencial(chain, q_inicio, pose_objetivo, pasos, dt)

    # Enviar al controlador
    client = actionlib.SimpleActionClient(
        '/pos_joint_traj_controller/follow_joint_trajectory',
        FollowJointTrajectoryAction
    )
    rospy.loginfo("Esperando al servidor de trayectoria...")
    client.wait_for_server()
    rospy.loginfo("Conectado. Enviando objetivo...")

    goal = FollowJointTrajectoryGoal()
    goal.trajectory.joint_names = joint_names
    goal.trajectory.points = puntos

    client.send_goal(goal)
    client.wait_for_result()
    rospy.loginfo("Movimiento completado.")

