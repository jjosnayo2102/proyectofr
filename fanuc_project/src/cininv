#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
from markers import *
from auxfunctions import *
import numpy as np

if __name__ == '__main__':
    rospy.init_node("testInvKine")
    pub = rospy.Publisher('joint_states', JointState, queue_size=1)
    bmarker      = BallMarker(color['RED'])
    bmarker_des  = BallMarker(color['GREEN'])
    jnames = [
        'joint_1', 'joint_2','joint_3','joint_4','joint_5','joint_6',
        'gripper_base_finger_1', 'gripper_base_finger_2'
    ]
    xd = np.array([0.5,0.5,0.3])
    q0 = np.array([0, 0, 0, 0, 0, 0])
    ql = np.array([-2.967,-1.745,-1.222, -3.316, -2.181,-6.283 ])
    qu = np.array([2.967,2.530,3.577, 3.316, 2.181, 6.283 ])
    q = ikine(xd, q0, ql, qu)
    T = fkine_fanuc(q)
    print('Posicion cartesiana:\n', np.round(T,4))
    print(q)
    bmarker.position(T)
    bmarker_des.xyz(xd)

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        # Abre y cierra cada 2 segundos
        finger_open = np.array([0.04, 0.04])
        finger_close = np.array([0.0, 0.0])
        t = rospy.get_time()
        finger = finger_open if (t % 4) < 2 else finger_close
        q_total = np.concatenate((q, finger))
        jstate = JointState()
        jstate.header.stamp = rospy.Time.now()
        jstate.name = jnames
        jstate.position = q_total
        pub.publish(jstate)
        bmarker.publish()
        bmarker_des.publish()
        rate.sleep()
