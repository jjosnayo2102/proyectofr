#!/usr/bin/env python3
import numpy as np
import PyKDL as kdl
from urdf_parser_py.urdf import URDF
from kdl_parser_py.urdf import treeFromUrdfModel
import subprocess

if __name__ == '__main__':
  # Ruta al archivo principal que llama la macro, NO al macro solo
  xacro_path = '/home/jjosnayo/lab_ws/src/proyectofr/fanuc_robot/fanuc_lrmate200id_support/urdf/lrmate200id.xacro'
  # Ejecutar xacro
  xacro_result = subprocess.run(['xacro', xacro_path], capture_output=True, text=True)
  # Cargar el URDF expandido
  robot = URDF.from_xml_string(xacro_result.stdout)
  ok, tree = treeFromUrdfModel(robot)
  chain = tree.getChain("base_link", "tool0")
  q_min = kdl.JntArray(chain.getNrOfJoints())
  q_max = kdl.JntArray(chain.getNrOfJoints())
  
  ql = np.array([-2.967,-1.745,-1.222, -3.316, -2.181,-6.283 ])
  qu = np.array([ 2.967, 2.530, 3.577,  3.316,  2.181, 6.283 ])
  for i in range(chain.getNrOfJoints()):
    q_min[i] = ql[i]
    q_max[i] = qu[i]
  fk_solver = kdl.ChainFkSolverPos_recursive(chain)
  vel_solver = kdl.ChainIkSolverVel_pinv(chain)
  ik_solver = kdl.ChainIkSolverPos_NR_JL(chain, q_min, q_max, fk_solver, vel_solver)
  q_init = kdl.JntArray(chain.getNrOfJoints())
  q_init[0] = -np.pi/4 # Hombro: 45°
  q_init[1] = np.pi/2 # Codo: 90° => Codo arriba
  # pose, es la combinacion de posicion y orientacion del robot.
  target_pose = kdl.Frame(kdl.Rotation.RPY(0, 0, 0), kdl.Vector(0.5, 0.0, 0.5)) # Indicar la pose deseada.
  q_out = kdl.JntArray(chain.getNrOfJoints()) # Variable de la pose final, todo en cero para este caso.
  ik_solver.CartToJnt(q_init, target_pose, q_out) # Resolver la cinematica la posicion deseada.
  ql_out = [q_out[i] for i in range(q_out.rows())] # Convertir el resultado a tipo lista.
  print(ql_out)
